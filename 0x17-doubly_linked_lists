{"payload":{"allShortcutsEnabled":false,"path":"0x17-doubly_linked_lists","repo":{"id":399894432,"defaultBranch":"master","name":"alx-low_level_programming","ownerLogin":"Pericles001","currentUserCanPush":false,"isFork":false,"isEmpty":false,"createdAt":"2021-08-25T16:56:35.000Z","ownerAvatar":"https://avatars.githubusercontent.com/u/55035365?v=4","public":true,"private":false,"isOrgOwned":false},"currentUser":null,"refInfo":{"name":"master","listCacheKey":"v0:1629910698.81384","canEdit":false,"refType":"branch","currentOid":"29c3c687100130842ea1fa2a96312de480863d40"},"tree":{"items":[{"name":".gitignore","path":"0x17-doubly_linked_lists/.gitignore","contentType":"file"},{"name":"0-print_dlistint.c","path":"0x17-doubly_linked_lists/0-print_dlistint.c","contentType":"file"},{"name":"1-dlistint_len.c","path":"0x17-doubly_linked_lists/1-dlistint_len.c","contentType":"file"},{"name":"100-password","path":"0x17-doubly_linked_lists/100-password","contentType":"file"},{"name":"102-result","path":"0x17-doubly_linked_lists/102-result","contentType":"file"},{"name":"103-keygen.c","path":"0x17-doubly_linked_lists/103-keygen.c","contentType":"file"},{"name":"2-add_dnodeint.c","path":"0x17-doubly_linked_lists/2-add_dnodeint.c","contentType":"file"},{"name":"3-add_dnodeint_end.c","path":"0x17-doubly_linked_lists/3-add_dnodeint_end.c","contentType":"file"},{"name":"4-free_dlistint.c","path":"0x17-doubly_linked_lists/4-free_dlistint.c","contentType":"file"},{"name":"5-get_dnodeint.c","path":"0x17-doubly_linked_lists/5-get_dnodeint.c","contentType":"file"},{"name":"6-sum_dlistint.c","path":"0x17-doubly_linked_lists/6-sum_dlistint.c","contentType":"file"},{"name":"7-insert_dnodeint.c","path":"0x17-doubly_linked_lists/7-insert_dnodeint.c","contentType":"file"},{"name":"8-delete_dnodeint.c","path":"0x17-doubly_linked_lists/8-delete_dnodeint.c","contentType":"file"},{"name":"README.md","path":"0x17-doubly_linked_lists/README.md","contentType":"file"},{"name":"lists.h","path":"0x17-doubly_linked_lists/lists.h","contentType":"file"}],"templateDirectorySuggestionUrl":null,"readme":{"displayName":"README.md","richText":"<article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-0x17-c---doubly-linked-lists\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#0x17-c---doubly-linked-lists\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>0x17. C - Doubly linked lists</h1>\n<ul dir=\"auto\">\n<li>By Julien Barbier</li>\n</ul>\n<h4 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-in-a-nutshell\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#in-a-nutshell\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>In a nutshell...</h4>\n<ul dir=\"auto\">\n<li><strong>Auto QA review:</strong> 0.0/98 mandatory &amp; 0.0/16 optional</li>\n<li><strong>Altogether:</strong>  <strong>0.0%</strong>\n<ul dir=\"auto\">\n<li>Mandatory: 0.0%</li>\n<li>Optional: 0.0%</li>\n<li>Calculation:  0.0% + (0.0% * 0.0%)  == <strong>0.0%</strong></li>\n</ul>\n</li>\n</ul>\n<h2 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-resources\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#resources\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>Resources</h2>\n<p dir=\"auto\"><strong>Read or watch</strong>:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://alx-intranet.hbtn.io/rltoken/C5_IRM981SVn8oA8RP3gag\" title=\"What is a Doubly Linked List\" rel=\"nofollow\">What is a Doubly Linked List</a></li>\n</ul>\n<h2 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-learning-objectives\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#learning-objectives\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>Learning Objectives</h2>\n<p dir=\"auto\">At the end of this project, you are expected to be able to <a href=\"https://alx-intranet.hbtn.io/rltoken/0ABh2M07w5kdsh9gRx1XwA\" title=\"explain to anyone\" rel=\"nofollow\">explain to anyone</a>, <strong>without the help of Google</strong>:</p>\n<h3 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-general\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#general\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>General</h3>\n<ul dir=\"auto\">\n<li>What is a doubly linked list</li>\n<li>How to use doubly linked lists</li>\n<li>Start to look for the right source of information without too much help</li>\n</ul>\n<h2 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-requirements\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#requirements\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>Requirements</h2>\n<h3 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-general-1\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#general-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>General</h3>\n<ul dir=\"auto\">\n<li>Allowed editors: <code>vi</code>, <code>vim</code>, <code>emacs</code></li>\n<li>All your files will be interpreted/compiled on Ubuntu 20.04 LTS using python3 (version 3.8.5)</li>\n<li>All your files should end with a new line</li>\n<li>A <code>README.md</code> file, at the root of the folder of the project is mandatory</li>\n<li>Your code should use the <code>Betty</code> style. It will be checked using <a href=\"https://github.com/holbertonschool/Betty/blob/master/betty-style.pl\" title=\"betty-style.pl\">betty-style.pl</a> and <a href=\"https://github.com/holbertonschool/Betty/blob/master/betty-doc.pl\" title=\"betty-doc.pl\">betty-doc.pl</a></li>\n<li>You are not allowed to use global variables</li>\n<li>No more than 5 functions per file</li>\n<li>The only C standard library functions allowed are <code>malloc</code>, <code>free</code>, <code>printf</code> and <code>exit</code></li>\n<li>In the following examples, the <code>main.c</code> files are shown as examples. You can use them to test your functions, but you don't have to push them to your repo (if you do we won't take them into account). We will use our own <code>main.c</code> files at compilation. Our <code>main.c</code> files might be different from the one shown in the examples</li>\n<li>The prototypes of all your functions should be included in your header file called <code>lists.h</code></li>\n<li>Don't forget to push your header file</li>\n<li>All your header files should be include guarded</li>\n</ul>\n<h2 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-more-info\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#more-info\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>More Info</h2>\n<p dir=\"auto\">Please use this data structure for this project:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"/**\n * struct dlistint_s - doubly linked list\n * @n: integer\n * @prev: points to the previous node\n * @next: points to the next node\n *\n * Description: doubly linked list node structure\n *\n */\ntypedef struct dlistint_s\n{\n    int n;\n    struct dlistint_s *prev;\n    struct dlistint_s *next;\n} dlistint_t;\n\"><pre class=\"notranslate\"><code>/**\n * struct dlistint_s - doubly linked list\n * @n: integer\n * @prev: points to the previous node\n * @next: points to the next node\n *\n * Description: doubly linked list node structure\n *\n */\ntypedef struct dlistint_s\n{\n    int n;\n    struct dlistint_s *prev;\n    struct dlistint_s *next;\n} dlistint_t;\n\n</code></pre></div>\n<h2 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-quiz-questions\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#quiz-questions\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>Quiz questions</h2>\n<p dir=\"auto\">Show</p>\n<h2 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-tasks\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#tasks\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>Tasks</h2>\n<h3 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-0-print-list\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#0-print-list\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>0. Print list</h3>\n<p dir=\"auto\">mandatory</p>\n<p dir=\"auto\">Score: 0.00% (Checks completed: 0.00%)</p>\n<p dir=\"auto\">Write a function that prints all the elements of a <code>dlistint_t</code> list.</p>\n<ul dir=\"auto\">\n<li>Prototype: <code>size_t print_dlistint(const dlistint_t *h);</code></li>\n<li>Return: the number of nodes</li>\n<li>Format: see example</li>\n</ul>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"julien@ubuntu:~/0x17. Doubly linked lists$ cat 0-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &quot;lists.h&quot;\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n    dlistint_t *new;\n    dlistint_t hello = {8, NULL, NULL};\n    size_t n;\n\n    head = &amp;hello;\n    new = malloc(sizeof(dlistint_t));\n    if (new == NULL)\n    {\n        dprintf(2, &quot;Error: Can't malloc\\n&quot;);\n        return (EXIT_FAILURE);\n    }\n    new-&gt;n = 9;\n    head-&gt;prev = new;\n    new-&gt;next = head;\n    new-&gt;prev = NULL;\n    head = new;\n    n = print_dlistint(head);\n    printf(&quot;-&gt; %lu elements\\n&quot;, n);\n    free(new);\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 0-main.c 0-print_dlistint.c -o a\njulien@ubuntu:~/0x17. Doubly linked lists$ ./a\n9\n8\n-&gt; 2 elements\njulien@ubuntu:~/0x17. Doubly linked lists$\n\"><pre class=\"notranslate\"><code>julien@ubuntu:~/0x17. Doubly linked lists$ cat 0-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include \"lists.h\"\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n    dlistint_t *new;\n    dlistint_t hello = {8, NULL, NULL};\n    size_t n;\n\n    head = &amp;hello;\n    new = malloc(sizeof(dlistint_t));\n    if (new == NULL)\n    {\n        dprintf(2, \"Error: Can't malloc\\n\");\n        return (EXIT_FAILURE);\n    }\n    new-&gt;n = 9;\n    head-&gt;prev = new;\n    new-&gt;next = head;\n    new-&gt;prev = NULL;\n    head = new;\n    n = print_dlistint(head);\n    printf(\"-&gt; %lu elements\\n\", n);\n    free(new);\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 0-main.c 0-print_dlistint.c -o a\njulien@ubuntu:~/0x17. Doubly linked lists$ ./a\n9\n8\n-&gt; 2 elements\njulien@ubuntu:~/0x17. Doubly linked lists$\n\n</code></pre></div>\n<p dir=\"auto\"><strong>Repo:</strong></p>\n<ul dir=\"auto\">\n<li>GitHub repository: <code>alx-low_level_programming</code></li>\n<li>Directory: <code>0x17-doubly_linked_lists</code></li>\n<li>File: <code>0-print_dlistint.c</code></li>\n</ul>\n<h3 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-1-list-length\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#1-list-length\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>1. List length</h3>\n<p dir=\"auto\">mandatory</p>\n<p dir=\"auto\">Score: 0.00% (Checks completed: 0.00%)</p>\n<p dir=\"auto\">Write a function that returns the number of elements in a linked <code>dlistint_t</code> list.</p>\n<ul dir=\"auto\">\n<li>Prototype: <code>size_t dlistint_len(const dlistint_t *h);</code></li>\n</ul>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"julien@ubuntu:~/0x17. Doubly linked lists$ cat 1-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &quot;lists.h&quot;\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n    dlistint_t *new;\n    dlistint_t hello = {8, NULL, NULL};\n    size_t n;\n\n    head = &amp;hello;\n    new = malloc(sizeof(dlistint_t));\n    if (new == NULL)\n    {\n        dprintf(2, &quot;Error: Can't malloc\\n&quot;);\n        return (EXIT_FAILURE);\n    }\n    new-&gt;n = 9;\n    head-&gt;prev = new;\n    new-&gt;next = head;\n    new-&gt;prev = NULL;\n    head = new;\n    n = dlistint_len(head);\n    printf(&quot;-&gt; %lu elements\\n&quot;, n);\n    free(new);\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 1-main.c 1-dlistint_len.c -o b\njulien@ubuntu:~/0x17. Doubly linked lists$ ./b\n-&gt; 2 elements\njulien@ubuntu:~/0x17. Doubly linked lists$\n\"><pre class=\"notranslate\"><code>julien@ubuntu:~/0x17. Doubly linked lists$ cat 1-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include \"lists.h\"\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n    dlistint_t *new;\n    dlistint_t hello = {8, NULL, NULL};\n    size_t n;\n\n    head = &amp;hello;\n    new = malloc(sizeof(dlistint_t));\n    if (new == NULL)\n    {\n        dprintf(2, \"Error: Can't malloc\\n\");\n        return (EXIT_FAILURE);\n    }\n    new-&gt;n = 9;\n    head-&gt;prev = new;\n    new-&gt;next = head;\n    new-&gt;prev = NULL;\n    head = new;\n    n = dlistint_len(head);\n    printf(\"-&gt; %lu elements\\n\", n);\n    free(new);\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 1-main.c 1-dlistint_len.c -o b\njulien@ubuntu:~/0x17. Doubly linked lists$ ./b\n-&gt; 2 elements\njulien@ubuntu:~/0x17. Doubly linked lists$\n\n</code></pre></div>\n<p dir=\"auto\"><strong>Repo:</strong></p>\n<ul dir=\"auto\">\n<li>GitHub repository: <code>alx-low_level_programming</code></li>\n<li>Directory: <code>0x17-doubly_linked_lists</code></li>\n<li>File: <code>1-dlistint_len.c</code></li>\n</ul>\n<h3 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-2-add-node\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#2-add-node\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>2. Add node</h3>\n<p dir=\"auto\">mandatory</p>\n<p dir=\"auto\">Score: 0.00% (Checks completed: 0.00%)</p>\n<p dir=\"auto\">Write a function that adds a new node at the beginning of a <code>dlistint_t</code> list.</p>\n<ul dir=\"auto\">\n<li>Prototype: <code>dlistint_t *add_dnodeint(dlistint_t **head, const int n);</code></li>\n<li>Return: the address of the new element, or <code>NULL</code> if it failed</li>\n</ul>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"julien@ubuntu:~/0x17. Doubly linked lists$ cat 2-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &quot;lists.h&quot;\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n\n    head = NULL;\n    add_dnodeint(&amp;head, 0);\n    add_dnodeint(&amp;head, 1);\n    add_dnodeint(&amp;head, 2);\n    add_dnodeint(&amp;head, 3);\n    add_dnodeint(&amp;head, 4);\n    add_dnodeint(&amp;head, 98);\n    add_dnodeint(&amp;head, 402);\n    add_dnodeint(&amp;head, 1024);\n    print_dlistint(head);\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 2-main.c 2-add_dnodeint.c 0-print_dlistint.c -o c\njulien@ubuntu:~/0x17. Doubly linked lists$ ./c\n1024\n402\n98\n4\n3\n2\n1\n0\njulien@ubuntu:~/0x17. Doubly linked lists$\n\"><pre class=\"notranslate\"><code>julien@ubuntu:~/0x17. Doubly linked lists$ cat 2-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include \"lists.h\"\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n\n    head = NULL;\n    add_dnodeint(&amp;head, 0);\n    add_dnodeint(&amp;head, 1);\n    add_dnodeint(&amp;head, 2);\n    add_dnodeint(&amp;head, 3);\n    add_dnodeint(&amp;head, 4);\n    add_dnodeint(&amp;head, 98);\n    add_dnodeint(&amp;head, 402);\n    add_dnodeint(&amp;head, 1024);\n    print_dlistint(head);\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 2-main.c 2-add_dnodeint.c 0-print_dlistint.c -o c\njulien@ubuntu:~/0x17. Doubly linked lists$ ./c\n1024\n402\n98\n4\n3\n2\n1\n0\njulien@ubuntu:~/0x17. Doubly linked lists$\n\n</code></pre></div>\n<p dir=\"auto\"><strong>Repo:</strong></p>\n<ul dir=\"auto\">\n<li>GitHub repository: <code>alx-low_level_programming</code></li>\n<li>Directory: <code>0x17-doubly_linked_lists</code></li>\n<li>File: <code>2-add_dnodeint.c</code></li>\n</ul>\n<h3 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-3-add-node-at-the-end\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#3-add-node-at-the-end\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>3. Add node at the end</h3>\n<p dir=\"auto\">mandatory</p>\n<p dir=\"auto\">Score: 0.00% (Checks completed: 0.00%)</p>\n<p dir=\"auto\">Write a function that adds a new node at the end of a <code>dlistint_t</code> list.</p>\n<ul dir=\"auto\">\n<li>Prototype: <code>dlistint_t *add_dnodeint_end(dlistint_t **head, const int n);</code></li>\n<li>Return: the address of the new element, or <code>NULL</code> if it failed</li>\n</ul>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"julien@ubuntu:~/0x17. Doubly linked lists$ cat 3-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &quot;lists.h&quot;\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    print_dlistint(head);\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 3-main.c 3-add_dnodeint_end.c 0-print_dlistint.c -o d\njulien@ubuntu:~/0x17. Doubly linked lists$ ./d\n0\n1\n2\n3\n4\n98\n402\n1024\njulien@ubuntu:~/0x17. Doubly linked lists$\n\"><pre class=\"notranslate\"><code>julien@ubuntu:~/0x17. Doubly linked lists$ cat 3-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include \"lists.h\"\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    print_dlistint(head);\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 3-main.c 3-add_dnodeint_end.c 0-print_dlistint.c -o d\njulien@ubuntu:~/0x17. Doubly linked lists$ ./d\n0\n1\n2\n3\n4\n98\n402\n1024\njulien@ubuntu:~/0x17. Doubly linked lists$\n\n</code></pre></div>\n<p dir=\"auto\"><strong>Repo:</strong></p>\n<ul dir=\"auto\">\n<li>GitHub repository: <code>alx-low_level_programming</code></li>\n<li>Directory: <code>0x17-doubly_linked_lists</code></li>\n<li>File: <code>3-add_dnodeint_end.c</code></li>\n</ul>\n<h3 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-4-free-list\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#4-free-list\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>4. Free list</h3>\n<p dir=\"auto\">mandatory</p>\n<p dir=\"auto\">Score: 0.00% (Checks completed: 0.00%)</p>\n<p dir=\"auto\">Write a function that frees a <code>dlistint_t</code> list.</p>\n<ul dir=\"auto\">\n<li>Prototype: <code>void free_dlistint(dlistint_t *head);</code></li>\n</ul>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"julien@ubuntu:~/0x17. Doubly linked lists$ cat 4-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &quot;lists.h&quot;\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    print_dlistint(head);\n    free_dlistint(head);\n    head = NULL;\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 4-main.c 3-add_dnodeint_end.c 0-print_dlistint.c 4-free_dlistint.c -o e\njulien@ubuntu:~/0x17. Doubly linked lists$ valgrind ./e\n==4197== Memcheck, a memory error detector\n==4197== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==4197== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==4197== Command: ./e\n==4197==\n0\n1\n2\n3\n4\n98\n402\n1024\n==4197==\n==4197== HEAP SUMMARY:\n==4197==     in use at exit: 0 bytes in 0 blocks\n==4197==   total heap usage: 9 allocs, 9 frees, 1,216 bytes allocated\n==4197==\n==4197== All heap blocks were freed -- no leaks are possible\n==4197==\n==4197== For counts of detected and suppressed errors, rerun with: -v\n==4197== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\njulien@ubuntu:~/0x17. Doubly linked lists$\n\"><pre class=\"notranslate\"><code>julien@ubuntu:~/0x17. Doubly linked lists$ cat 4-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include \"lists.h\"\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    print_dlistint(head);\n    free_dlistint(head);\n    head = NULL;\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 4-main.c 3-add_dnodeint_end.c 0-print_dlistint.c 4-free_dlistint.c -o e\njulien@ubuntu:~/0x17. Doubly linked lists$ valgrind ./e\n==4197== Memcheck, a memory error detector\n==4197== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==4197== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==4197== Command: ./e\n==4197==\n0\n1\n2\n3\n4\n98\n402\n1024\n==4197==\n==4197== HEAP SUMMARY:\n==4197==     in use at exit: 0 bytes in 0 blocks\n==4197==   total heap usage: 9 allocs, 9 frees, 1,216 bytes allocated\n==4197==\n==4197== All heap blocks were freed -- no leaks are possible\n==4197==\n==4197== For counts of detected and suppressed errors, rerun with: -v\n==4197== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\njulien@ubuntu:~/0x17. Doubly linked lists$\n\n</code></pre></div>\n<p dir=\"auto\"><strong>Repo:</strong></p>\n<ul dir=\"auto\">\n<li>GitHub repository: <code>alx-low_level_programming</code></li>\n<li>Directory: <code>0x17-doubly_linked_lists</code></li>\n<li>File: <code>4-free_dlistint.c</code></li>\n</ul>\n<h3 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-5-get-node-at-index\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#5-get-node-at-index\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>5. Get node at index</h3>\n<p dir=\"auto\">mandatory</p>\n<p dir=\"auto\">Score: 0.00% (Checks completed: 0.00%)</p>\n<p dir=\"auto\">Write a function that returns the nth node of a <code>dlistint_t</code> linked list.</p>\n<ul dir=\"auto\">\n<li>Prototype: <code>dlistint_t *get_dnodeint_at_index(dlistint_t *head, unsigned int index);</code></li>\n<li>where <code>index</code> is the index of the node, starting from <code>0</code></li>\n<li>if the node does not exist, return <code>NULL</code></li>\n</ul>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"julien@ubuntu:~/0x17. Doubly linked lists$ cat 5-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &quot;lists.h&quot;\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n    dlistint_t *node;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    print_dlistint(head);\n    node = get_dnodeint_at_index(head, 5);\n    printf(&quot;%d\\n&quot;, node-&gt;n);\n    free_dlistint(head);\n    head = NULL;\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 5-main.c 3-add_dnodeint_end.c 0-print_dlistint.c 4-free_dlistint.c 5-get_dnodeint.c -o h\njulien@ubuntu:~/0x17. Doubly linked lists$ ./h\n0\n1\n2\n3\n4\n98\n402\n1024\n98\njulien@ubuntu:~/0x17. Doubly linked lists$\n\"><pre class=\"notranslate\"><code>julien@ubuntu:~/0x17. Doubly linked lists$ cat 5-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include \"lists.h\"\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n    dlistint_t *node;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    print_dlistint(head);\n    node = get_dnodeint_at_index(head, 5);\n    printf(\"%d\\n\", node-&gt;n);\n    free_dlistint(head);\n    head = NULL;\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 5-main.c 3-add_dnodeint_end.c 0-print_dlistint.c 4-free_dlistint.c 5-get_dnodeint.c -o h\njulien@ubuntu:~/0x17. Doubly linked lists$ ./h\n0\n1\n2\n3\n4\n98\n402\n1024\n98\njulien@ubuntu:~/0x17. Doubly linked lists$\n\n</code></pre></div>\n<p dir=\"auto\"><strong>Repo:</strong></p>\n<ul dir=\"auto\">\n<li>GitHub repository: <code>alx-low_level_programming</code></li>\n<li>Directory: <code>0x17-doubly_linked_lists</code></li>\n<li>File: <code>5-get_dnodeint.c</code></li>\n</ul>\n<h3 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-6-sum-list\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#6-sum-list\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>6. Sum list</h3>\n<p dir=\"auto\">mandatory</p>\n<p dir=\"auto\">Score: 0.00% (Checks completed: 0.00%)</p>\n<p dir=\"auto\">Write a function that returns the sum of all the data (n) of a <code>dlistint_t</code> linked list.</p>\n<ul dir=\"auto\">\n<li>Prototype: <code>int sum_dlistint(dlistint_t *head);</code></li>\n<li>if the list is empty, return <code>0</code></li>\n</ul>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"julien@ubuntu:~/0x17. Doubly linked lists$ cat 6-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &quot;lists.h&quot;\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n    int sum;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    sum = sum_dlistint(head);\n    printf(&quot;sum = %d\\n&quot;, sum);\n    free_dlistint(head);\n    head = NULL;\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra 6-main.c -std=gnu89 3-add_dnodeint_end.c 4-free_dlistint.c 6-sum_dlistint.c -o i\njulien@ubuntu:~/0x17. Doubly linked lists$ ./i\nsum = 1534\njulien@ubuntu:~/0x17. Doubly linked lists$\n\"><pre class=\"notranslate\"><code>julien@ubuntu:~/0x17. Doubly linked lists$ cat 6-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include \"lists.h\"\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n    int sum;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    sum = sum_dlistint(head);\n    printf(\"sum = %d\\n\", sum);\n    free_dlistint(head);\n    head = NULL;\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra 6-main.c -std=gnu89 3-add_dnodeint_end.c 4-free_dlistint.c 6-sum_dlistint.c -o i\njulien@ubuntu:~/0x17. Doubly linked lists$ ./i\nsum = 1534\njulien@ubuntu:~/0x17. Doubly linked lists$\n\n</code></pre></div>\n<p dir=\"auto\"><strong>Repo:</strong></p>\n<ul dir=\"auto\">\n<li>GitHub repository: <code>alx-low_level_programming</code></li>\n<li>Directory: <code>0x17-doubly_linked_lists</code></li>\n<li>File: <code>6-sum_dlistint.c</code></li>\n</ul>\n<h3 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-7-insert-at-index\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#7-insert-at-index\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>7. Insert at index</h3>\n<p dir=\"auto\">mandatory</p>\n<p dir=\"auto\">Score: 0.00% (Checks completed: 0.00%)</p>\n<p dir=\"auto\">Write a function that inserts a new node at a given position.</p>\n<ul dir=\"auto\">\n<li>Prototype: <code>dlistint_t *insert_dnodeint_at_index(dlistint_t **h, unsigned int idx, int n);</code></li>\n<li>where <code>idx</code> is the index of the list where the new node should be added. Index starts at <code>0</code></li>\n<li>Returns: the address of the new node, or <code>NULL</code> if it failed</li>\n<li>if it is not possible to add the new node at index <code>idx</code>, do not add the new node and return <code>NULL</code></li>\n</ul>\n<p dir=\"auto\">Your files <code>2-add_dnodeint.c</code> and <code>3-add_dnodeint_end.c</code> will be compiled during the correction</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"julien@ubuntu:~/0x17. Doubly linked lists$ cat 7-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &quot;lists.h&quot;\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    print_dlistint(head);\n    printf(&quot;-----------------\\n&quot;);\n    insert_dnodeint_at_index(&amp;head, 5, 4096);\n    print_dlistint(head);\n    free_dlistint(head);\n    head = NULL;\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 7-main.c 2-add_dnodeint.c 3-add_dnodeint_end.c 0-print_dlistint.c 4-free_dlistint.c 7-insert_dnodeint.c -o j\njulien@ubuntu:~/0x17. Doubly linked lists$ ./j\n0\n1\n2\n3\n4\n98\n402\n1024\n-----------------\n0\n1\n2\n3\n4\n4096\n98\n402\n1024\njulien@ubuntu:~/0x17. Doubly linked lists$\n\"><pre class=\"notranslate\"><code>julien@ubuntu:~/0x17. Doubly linked lists$ cat 7-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include \"lists.h\"\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    print_dlistint(head);\n    printf(\"-----------------\\n\");\n    insert_dnodeint_at_index(&amp;head, 5, 4096);\n    print_dlistint(head);\n    free_dlistint(head);\n    head = NULL;\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 7-main.c 2-add_dnodeint.c 3-add_dnodeint_end.c 0-print_dlistint.c 4-free_dlistint.c 7-insert_dnodeint.c -o j\njulien@ubuntu:~/0x17. Doubly linked lists$ ./j\n0\n1\n2\n3\n4\n98\n402\n1024\n-----------------\n0\n1\n2\n3\n4\n4096\n98\n402\n1024\njulien@ubuntu:~/0x17. Doubly linked lists$\n\n</code></pre></div>\n<p dir=\"auto\"><strong>Repo:</strong></p>\n<ul dir=\"auto\">\n<li>GitHub repository: <code>alx-low_level_programming</code></li>\n<li>Directory: <code>0x17-doubly_linked_lists</code></li>\n<li>File: <code>7-insert_dnodeint.c, 2-add_dnodeint.c, 3-add_dnodeint_end.c</code></li>\n</ul>\n<h3 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-8-delete-at-index\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#8-delete-at-index\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>8. Delete at index</h3>\n<p dir=\"auto\">mandatory</p>\n<p dir=\"auto\">Score: 0.00% (Checks completed: 0.00%)</p>\n<p dir=\"auto\">Write a function that deletes the node at index <code>index</code> of a <code>dlistint_t</code> linked list.</p>\n<ul dir=\"auto\">\n<li>Prototype: <code>int delete_dnodeint_at_index(dlistint_t **head, unsigned int index);</code></li>\n<li>where <code>index</code> is the index of the node that should be deleted. Index starts at <code>0</code></li>\n<li>Returns: <code>1</code> if it succeeded, <code>-1</code> if it failed</li>\n</ul>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"julien@ubuntu:~/0x17. Doubly linked lists$ cat 8-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &quot;lists.h&quot;\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    print_dlistint(head);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 5);\n    print_dlistint(head);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    return (0);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 8-main.c 3-add_dnodeint_end.c 0-print_dlistint.c 4-free_dlistint.c 8-delete_dnodeint.c -o k\njulien@ubuntu:~/0x17. Doubly linked lists$ ./k\n0\n1\n2\n3\n4\n98\n402\n1024\n-----------------\n0\n1\n2\n3\n4\n402\n1024\n-----------------\n1\n2\n3\n4\n402\n1024\n-----------------\n2\n3\n4\n402\n1024\n-----------------\n3\n4\n402\n1024\n-----------------\n4\n402\n1024\n-----------------\n402\n1024\n-----------------\n1024\n-----------------0x17. C - Doubly linked lists\n\n    By Julien Barbier\n    Weight: 1\n    Ongoing second chance project - started 11-25-2021, must end by 11-27-2021 (in about 10 hours) - you're done with 0% of tasks.\n    QA review fully automated.\n    In a nutshell…\n        Auto QA review: 0.0/98 mandatory &amp; 0.0/16 optional\n        Altogether:  0.0%\n            Mandatory: 0.0%\n            Optional: 0.0%\n            Calculation:  0.0% + (0.0% * 0.0%)  == 0.0%\n\nResources\n\nRead or watch:\n\n    What is a Doubly Linked List\n\nLearning Objectives\n\nAt the end of this project, you are expected to be able to explain to anyone, without the help of Google:\nGeneral\n\n    What is a doubly linked list\n    How to use doubly linked lists\n    Start to look for the right source of information without too much help\n\nRequirements\nGeneral\n\n    Allowed editors: vi, vim, emacs\n    All your files will be interpreted/compiled on Ubuntu 20.04 LTS using python3 (version 3.8.5)\n    All your files should end with a new line\n    A README.md file, at the root of the folder of the project is mandatory\n    Your code should use the Betty style. It will be checked using betty-style.pl and betty-doc.pl\n    You are not allowed to use global variables\n    No more than 5 functions per file\n    The only C standard library functions allowed are malloc, free, printf and exit\n    In the following examples, the main.c files are shown as examples. You can use them to test your functions, but you don’t have to push them to your repo (if you do we won’t take them into account). We will use our own main.c files at compilation. Our main.c files might be different from the one shown in the examples\n    The prototypes of all your functions should be included in your header file called lists.h\n    Don’t forget to push your header file\n    All your header files should be include guarded\n\nMore Info\n\nPlease use this data structure for this project:\n\n/**\n * struct dlistint_s - doubly linked list\n * @n: integer\n * @prev: points to the previous node\n * @next: points to the next node\n *\n * Description: doubly linked list node structure\n * \n */\ntypedef struct dlistint_s\n{\n    int n;\n    struct dlistint_s *prev;\n    struct dlistint_s *next;\n} dlistint_t;\n\nQuiz questions\n\nShow\nTasks\n0. Print list\nmandatory\nScore: 0.00% (Checks completed: 0.00%)\n\nWrite a function that prints all the elements of a dlistint_t list.\n\n    Prototype: size_t print_dlistint(const dlistint_t *h);\n    Return: the number of nodes\n    Format: see example\n\njulien@ubuntu:~/0x17. Doubly linked lists$ cat 0-main.c \n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &quot;lists.h&quot;\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n    dlistint_t *new;\n    dlistint_t hello = {8, NULL, NULL};\n    size_t n;\n\n    head = &amp;hello;\n    new = malloc(sizeof(dlistint_t));\n    if (new == NULL)\n    {\n        dprintf(2, &quot;Error: Can't malloc\\n&quot;);\n        return (EXIT_FAILURE);\n    }\n    new-&gt;n = 9;\n    head-&gt;prev = new;\n    new-&gt;next = head;\n    new-&gt;prev = NULL;\n    head = new;\n    n = print_dlistint(head);\n    printf(&quot;-&gt; %lu elements\\n&quot;, n);\n    free(new);\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 0-main.c 0-print_dlistint.c -o a\njulien@ubuntu:~/0x17. Doubly linked lists$ ./a \n9\n8\n-&gt; 2 elements\njulien@ubuntu:~/0x17. Doubly linked lists$ \n\nRepo:\n\n    GitHub repository: alx-low_level_programming\n    Directory: 0x17-doubly_linked_lists\n    File: 0-print_dlistint.c\n\n1. List length\nmandatory\nScore: 0.00% (Checks completed: 0.00%)\n\nWrite a function that returns the number of elements in a linked dlistint_t list.\n\n    Prototype: size_t dlistint_len(const dlistint_t *h);\n\njulien@ubuntu:~/0x17. Doubly linked lists$ cat 1-main.c \n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &quot;lists.h&quot;\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n    dlistint_t *new;\n    dlistint_t hello = {8, NULL, NULL};\n    size_t n;\n\n    head = &amp;hello;\n    new = malloc(sizeof(dlistint_t));\n    if (new == NULL)\n    {\n        dprintf(2, &quot;Error: Can't malloc\\n&quot;);\n        return (EXIT_FAILURE);\n    }\n    new-&gt;n = 9;\n    head-&gt;prev = new;\n    new-&gt;next = head;\n    new-&gt;prev = NULL;\n    head = new;\n    n = dlistint_len(head);\n    printf(&quot;-&gt; %lu elements\\n&quot;, n);\n    free(new);\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 1-main.c 1-dlistint_len.c -o b\njulien@ubuntu:~/0x17. Doubly linked lists$ ./b \n-&gt; 2 elements\njulien@ubuntu:~/0x17. Doubly linked lists$ \n\nRepo:\n\n    GitHub repository: alx-low_level_programming\n    Directory: 0x17-doubly_linked_lists\n    File: 1-dlistint_len.c\n\n2. Add node\nmandatory\nScore: 0.00% (Checks completed: 0.00%)\n\nWrite a function that adds a new node at the beginning of a dlistint_t list.\n\n    Prototype: dlistint_t *add_dnodeint(dlistint_t **head, const int n);\n    Return: the address of the new element, or NULL if it failed\n\njulien@ubuntu:~/0x17. Doubly linked lists$ cat 2-main.c \n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &quot;lists.h&quot;\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n\n    head = NULL;\n    add_dnodeint(&amp;head, 0);\n    add_dnodeint(&amp;head, 1);\n    add_dnodeint(&amp;head, 2);\n    add_dnodeint(&amp;head, 3);\n    add_dnodeint(&amp;head, 4);\n    add_dnodeint(&amp;head, 98);\n    add_dnodeint(&amp;head, 402);\n    add_dnodeint(&amp;head, 1024);\n    print_dlistint(head);\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 2-main.c 2-add_dnodeint.c 0-print_dlistint.c -o c\njulien@ubuntu:~/0x17. Doubly linked lists$ ./c \n1024\n402\n98\n4\n3\n2\n1\n0\njulien@ubuntu:~/0x17. Doubly linked lists$ \n\nRepo:\n\n    GitHub repository: alx-low_level_programming\n    Directory: 0x17-doubly_linked_lists\n    File: 2-add_dnodeint.c\n\n3. Add node at the end\nmandatory\nScore: 0.00% (Checks completed: 0.00%)\n\nWrite a function that adds a new node at the end of a dlistint_t list.\n\n    Prototype: dlistint_t *add_dnodeint_end(dlistint_t **head, const int n);\n    Return: the address of the new element, or NULL if it failed\n\njulien@ubuntu:~/0x17. Doubly linked lists$ cat 3-main.c \n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &quot;lists.h&quot;\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    print_dlistint(head);\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 3-main.c 3-add_dnodeint_end.c 0-print_dlistint.c -o d\njulien@ubuntu:~/0x17. Doubly linked lists$ ./d \n0\n1\n2\n3\n4\n98\n402\n1024\njulien@ubuntu:~/0x17. Doubly linked lists$ \n\nRepo:\n\n    GitHub repository: alx-low_level_programming\n    Directory: 0x17-doubly_linked_lists\n    File: 3-add_dnodeint_end.c\n\n4. Free list\nmandatory\nScore: 0.00% (Checks completed: 0.00%)\n\nWrite a function that frees a dlistint_t list.\n\n    Prototype: void free_dlistint(dlistint_t *head);\n\njulien@ubuntu:~/0x17. Doubly linked lists$ cat 4-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &quot;lists.h&quot;\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    print_dlistint(head);\n    free_dlistint(head);\n    head = NULL;\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 4-main.c 3-add_dnodeint_end.c 0-print_dlistint.c 4-free_dlistint.c -o e\njulien@ubuntu:~/0x17. Doubly linked lists$ valgrind ./e \n==4197== Memcheck, a memory error detector\n==4197== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==4197== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==4197== Command: ./e\n==4197== \n0\n1\n2\n3\n4\n98\n402\n1024\n==4197== \n==4197== HEAP SUMMARY:\n==4197==     in use at exit: 0 bytes in 0 blocks\n==4197==   total heap usage: 9 allocs, 9 frees, 1,216 bytes allocated\n==4197== \n==4197== All heap blocks were freed -- no leaks are possible\n==4197== \n==4197== For counts of detected and suppressed errors, rerun with: -v\n==4197== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\njulien@ubuntu:~/0x17. Doubly linked lists$ \n\nRepo:\n\n    GitHub repository: alx-low_level_programming\n    Directory: 0x17-doubly_linked_lists\n    File: 4-free_dlistint.c\n\n5. Get node at index\nmandatory\nScore: 0.00% (Checks completed: 0.00%)\n\nWrite a function that returns the nth node of a dlistint_t linked list.\n\n    Prototype: dlistint_t *get_dnodeint_at_index(dlistint_t *head, unsigned int index);\n    where index is the index of the node, starting from 0\n    if the node does not exist, return NULL\n\njulien@ubuntu:~/0x17. Doubly linked lists$ cat 5-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &quot;lists.h&quot;\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n    dlistint_t *node;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    print_dlistint(head);\n    node = get_dnodeint_at_index(head, 5);\n    printf(&quot;%d\\n&quot;, node-&gt;n);\n    free_dlistint(head);\n    head = NULL;\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 5-main.c 3-add_dnodeint_end.c 0-print_dlistint.c 4-free_dlistint.c 5-get_dnodeint.c -o h\njulien@ubuntu:~/0x17. Doubly linked lists$ ./h\n0\n1\n2\n3\n4\n98\n402\n1024\n98\njulien@ubuntu:~/0x17. Doubly linked lists$ \n\nRepo:\n\n    GitHub repository: alx-low_level_programming\n    Directory: 0x17-doubly_linked_lists\n    File: 5-get_dnodeint.c\n\n6. Sum list\nmandatory\nScore: 0.00% (Checks completed: 0.00%)\n\nWrite a function that returns the sum of all the data (n) of a dlistint_t linked list.\n\n    Prototype: int sum_dlistint(dlistint_t *head);\n    if the list is empty, return 0\n\njulien@ubuntu:~/0x17. Doubly linked lists$ cat 6-main.c \n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &quot;lists.h&quot;\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n    int sum;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    sum = sum_dlistint(head);\n    printf(&quot;sum = %d\\n&quot;, sum);\n    free_dlistint(head);\n    head = NULL;\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra 6-main.c -std=gnu89 3-add_dnodeint_end.c 4-free_dlistint.c 6-sum_dlistint.c -o i\njulien@ubuntu:~/0x17. Doubly linked lists$ ./i \nsum = 1534\njulien@ubuntu:~/0x17. Doubly linked lists$ \n\nRepo:\n\n    GitHub repository: alx-low_level_programming\n    Directory: 0x17-doubly_linked_lists\n    File: 6-sum_dlistint.c\n\n7. Insert at index\nmandatory\nScore: 0.00% (Checks completed: 0.00%)\n\nWrite a function that inserts a new node at a given position.\n\n    Prototype: dlistint_t *insert_dnodeint_at_index(dlistint_t **h, unsigned int idx, int n);\n    where idx is the index of the list where the new node should be added. Index starts at 0\n    Returns: the address of the new node, or NULL if it failed\n    if it is not possible to add the new node at index idx, do not add the new node and return NULL\n\nYour files 2-add_dnodeint.c and 3-add_dnodeint_end.c will be compiled during the correction\n\njulien@ubuntu:~/0x17. Doubly linked lists$ cat 7-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &quot;lists.h&quot;\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    print_dlistint(head);\n    printf(&quot;-----------------\\n&quot;);\n    insert_dnodeint_at_index(&amp;head, 5, 4096);\n    print_dlistint(head);\n    free_dlistint(head);\n    head = NULL;\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 7-main.c 2-add_dnodeint.c 3-add_dnodeint_end.c 0-print_dlistint.c 4-free_dlistint.c 7-insert_dnodeint.c -o j\njulien@ubuntu:~/0x17. Doubly linked lists$ ./j \n0\n1\n2\n3\n4\n98\n402\n1024\n-----------------\n0\n1\n2\n3\n4\n4096\n98\n402\n1024\njulien@ubuntu:~/0x17. Doubly linked lists$\n\nRepo:\n\n    GitHub repository: alx-low_level_programming\n    Directory: 0x17-doubly_linked_lists\n    File: 7-insert_dnodeint.c, 2-add_dnodeint.c, 3-add_dnodeint_end.c\n\n8. Delete at index\nmandatory\nScore: 0.00% (Checks completed: 0.00%)\n\nWrite a function that deletes the node at index index of a dlistint_t linked list.\n\n    Prototype: int delete_dnodeint_at_index(dlistint_t **head, unsigned int index);\n    where index is the index of the node that should be deleted. Index starts at 0\n    Returns: 1 if it succeeded, -1 if it failed\n\njulien@ubuntu:~/0x17. Doubly linked lists$ cat 8-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &quot;lists.h&quot;\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    print_dlistint(head);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 5);\n    print_dlistint(head);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(&quot;-----------------\\n&quot;);\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    return (0);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 8-main.c 3-add_dnodeint_end.c 0-print_dlistint.c 4-free_dlistint.c 8-delete_dnodeint.c -o k\njulien@ubuntu:~/0x17. Doubly linked lists$ ./k\n0\n1\n2\n3\n4\n98\n402\n1024\n-----------------\n0\n1\n2\n3\n4\n402\n1024\n-----------------\n1\n2\n3\n4\n402\n1024\n-----------------\n2\n3\n4\n402\n1024\n-----------------\n3\n4\n402\n1024\n-----------------\n4\n402\n1024\n-----------------\n402\n1024\n-----------------\n1024\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\njulien@ubuntu:~/0x17. Doubly linked lists$ \n\nRepo:\n\n    GitHub repository: alx-low_level_programming\n    Directory: 0x17-doubly_linked_lists\n    File: 8-delete_dnodeint.c\n\n\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\njulien@ubuntu:~/0x17. Doubly linked lists$\n\"><pre class=\"notranslate\"><code>julien@ubuntu:~/0x17. Doubly linked lists$ cat 8-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include \"lists.h\"\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    print_dlistint(head);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 5);\n    print_dlistint(head);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    return (0);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 8-main.c 3-add_dnodeint_end.c 0-print_dlistint.c 4-free_dlistint.c 8-delete_dnodeint.c -o k\njulien@ubuntu:~/0x17. Doubly linked lists$ ./k\n0\n1\n2\n3\n4\n98\n402\n1024\n-----------------\n0\n1\n2\n3\n4\n402\n1024\n-----------------\n1\n2\n3\n4\n402\n1024\n-----------------\n2\n3\n4\n402\n1024\n-----------------\n3\n4\n402\n1024\n-----------------\n4\n402\n1024\n-----------------\n402\n1024\n-----------------\n1024\n-----------------0x17. C - Doubly linked lists\n\n    By Julien Barbier\n    Weight: 1\n    Ongoing second chance project - started 11-25-2021, must end by 11-27-2021 (in about 10 hours) - you're done with 0% of tasks.\n    QA review fully automated.\n    In a nutshell…\n        Auto QA review: 0.0/98 mandatory &amp; 0.0/16 optional\n        Altogether:  0.0%\n            Mandatory: 0.0%\n            Optional: 0.0%\n            Calculation:  0.0% + (0.0% * 0.0%)  == 0.0%\n\nResources\n\nRead or watch:\n\n    What is a Doubly Linked List\n\nLearning Objectives\n\nAt the end of this project, you are expected to be able to explain to anyone, without the help of Google:\nGeneral\n\n    What is a doubly linked list\n    How to use doubly linked lists\n    Start to look for the right source of information without too much help\n\nRequirements\nGeneral\n\n    Allowed editors: vi, vim, emacs\n    All your files will be interpreted/compiled on Ubuntu 20.04 LTS using python3 (version 3.8.5)\n    All your files should end with a new line\n    A README.md file, at the root of the folder of the project is mandatory\n    Your code should use the Betty style. It will be checked using betty-style.pl and betty-doc.pl\n    You are not allowed to use global variables\n    No more than 5 functions per file\n    The only C standard library functions allowed are malloc, free, printf and exit\n    In the following examples, the main.c files are shown as examples. You can use them to test your functions, but you don’t have to push them to your repo (if you do we won’t take them into account). We will use our own main.c files at compilation. Our main.c files might be different from the one shown in the examples\n    The prototypes of all your functions should be included in your header file called lists.h\n    Don’t forget to push your header file\n    All your header files should be include guarded\n\nMore Info\n\nPlease use this data structure for this project:\n\n/**\n * struct dlistint_s - doubly linked list\n * @n: integer\n * @prev: points to the previous node\n * @next: points to the next node\n *\n * Description: doubly linked list node structure\n * \n */\ntypedef struct dlistint_s\n{\n    int n;\n    struct dlistint_s *prev;\n    struct dlistint_s *next;\n} dlistint_t;\n\nQuiz questions\n\nShow\nTasks\n0. Print list\nmandatory\nScore: 0.00% (Checks completed: 0.00%)\n\nWrite a function that prints all the elements of a dlistint_t list.\n\n    Prototype: size_t print_dlistint(const dlistint_t *h);\n    Return: the number of nodes\n    Format: see example\n\njulien@ubuntu:~/0x17. Doubly linked lists$ cat 0-main.c \n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include \"lists.h\"\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n    dlistint_t *new;\n    dlistint_t hello = {8, NULL, NULL};\n    size_t n;\n\n    head = &amp;hello;\n    new = malloc(sizeof(dlistint_t));\n    if (new == NULL)\n    {\n        dprintf(2, \"Error: Can't malloc\\n\");\n        return (EXIT_FAILURE);\n    }\n    new-&gt;n = 9;\n    head-&gt;prev = new;\n    new-&gt;next = head;\n    new-&gt;prev = NULL;\n    head = new;\n    n = print_dlistint(head);\n    printf(\"-&gt; %lu elements\\n\", n);\n    free(new);\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 0-main.c 0-print_dlistint.c -o a\njulien@ubuntu:~/0x17. Doubly linked lists$ ./a \n9\n8\n-&gt; 2 elements\njulien@ubuntu:~/0x17. Doubly linked lists$ \n\nRepo:\n\n    GitHub repository: alx-low_level_programming\n    Directory: 0x17-doubly_linked_lists\n    File: 0-print_dlistint.c\n\n1. List length\nmandatory\nScore: 0.00% (Checks completed: 0.00%)\n\nWrite a function that returns the number of elements in a linked dlistint_t list.\n\n    Prototype: size_t dlistint_len(const dlistint_t *h);\n\njulien@ubuntu:~/0x17. Doubly linked lists$ cat 1-main.c \n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include \"lists.h\"\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n    dlistint_t *new;\n    dlistint_t hello = {8, NULL, NULL};\n    size_t n;\n\n    head = &amp;hello;\n    new = malloc(sizeof(dlistint_t));\n    if (new == NULL)\n    {\n        dprintf(2, \"Error: Can't malloc\\n\");\n        return (EXIT_FAILURE);\n    }\n    new-&gt;n = 9;\n    head-&gt;prev = new;\n    new-&gt;next = head;\n    new-&gt;prev = NULL;\n    head = new;\n    n = dlistint_len(head);\n    printf(\"-&gt; %lu elements\\n\", n);\n    free(new);\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 1-main.c 1-dlistint_len.c -o b\njulien@ubuntu:~/0x17. Doubly linked lists$ ./b \n-&gt; 2 elements\njulien@ubuntu:~/0x17. Doubly linked lists$ \n\nRepo:\n\n    GitHub repository: alx-low_level_programming\n    Directory: 0x17-doubly_linked_lists\n    File: 1-dlistint_len.c\n\n2. Add node\nmandatory\nScore: 0.00% (Checks completed: 0.00%)\n\nWrite a function that adds a new node at the beginning of a dlistint_t list.\n\n    Prototype: dlistint_t *add_dnodeint(dlistint_t **head, const int n);\n    Return: the address of the new element, or NULL if it failed\n\njulien@ubuntu:~/0x17. Doubly linked lists$ cat 2-main.c \n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include \"lists.h\"\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n\n    head = NULL;\n    add_dnodeint(&amp;head, 0);\n    add_dnodeint(&amp;head, 1);\n    add_dnodeint(&amp;head, 2);\n    add_dnodeint(&amp;head, 3);\n    add_dnodeint(&amp;head, 4);\n    add_dnodeint(&amp;head, 98);\n    add_dnodeint(&amp;head, 402);\n    add_dnodeint(&amp;head, 1024);\n    print_dlistint(head);\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 2-main.c 2-add_dnodeint.c 0-print_dlistint.c -o c\njulien@ubuntu:~/0x17. Doubly linked lists$ ./c \n1024\n402\n98\n4\n3\n2\n1\n0\njulien@ubuntu:~/0x17. Doubly linked lists$ \n\nRepo:\n\n    GitHub repository: alx-low_level_programming\n    Directory: 0x17-doubly_linked_lists\n    File: 2-add_dnodeint.c\n\n3. Add node at the end\nmandatory\nScore: 0.00% (Checks completed: 0.00%)\n\nWrite a function that adds a new node at the end of a dlistint_t list.\n\n    Prototype: dlistint_t *add_dnodeint_end(dlistint_t **head, const int n);\n    Return: the address of the new element, or NULL if it failed\n\njulien@ubuntu:~/0x17. Doubly linked lists$ cat 3-main.c \n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include \"lists.h\"\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    print_dlistint(head);\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 3-main.c 3-add_dnodeint_end.c 0-print_dlistint.c -o d\njulien@ubuntu:~/0x17. Doubly linked lists$ ./d \n0\n1\n2\n3\n4\n98\n402\n1024\njulien@ubuntu:~/0x17. Doubly linked lists$ \n\nRepo:\n\n    GitHub repository: alx-low_level_programming\n    Directory: 0x17-doubly_linked_lists\n    File: 3-add_dnodeint_end.c\n\n4. Free list\nmandatory\nScore: 0.00% (Checks completed: 0.00%)\n\nWrite a function that frees a dlistint_t list.\n\n    Prototype: void free_dlistint(dlistint_t *head);\n\njulien@ubuntu:~/0x17. Doubly linked lists$ cat 4-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include \"lists.h\"\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    print_dlistint(head);\n    free_dlistint(head);\n    head = NULL;\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 4-main.c 3-add_dnodeint_end.c 0-print_dlistint.c 4-free_dlistint.c -o e\njulien@ubuntu:~/0x17. Doubly linked lists$ valgrind ./e \n==4197== Memcheck, a memory error detector\n==4197== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==4197== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==4197== Command: ./e\n==4197== \n0\n1\n2\n3\n4\n98\n402\n1024\n==4197== \n==4197== HEAP SUMMARY:\n==4197==     in use at exit: 0 bytes in 0 blocks\n==4197==   total heap usage: 9 allocs, 9 frees, 1,216 bytes allocated\n==4197== \n==4197== All heap blocks were freed -- no leaks are possible\n==4197== \n==4197== For counts of detected and suppressed errors, rerun with: -v\n==4197== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\njulien@ubuntu:~/0x17. Doubly linked lists$ \n\nRepo:\n\n    GitHub repository: alx-low_level_programming\n    Directory: 0x17-doubly_linked_lists\n    File: 4-free_dlistint.c\n\n5. Get node at index\nmandatory\nScore: 0.00% (Checks completed: 0.00%)\n\nWrite a function that returns the nth node of a dlistint_t linked list.\n\n    Prototype: dlistint_t *get_dnodeint_at_index(dlistint_t *head, unsigned int index);\n    where index is the index of the node, starting from 0\n    if the node does not exist, return NULL\n\njulien@ubuntu:~/0x17. Doubly linked lists$ cat 5-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include \"lists.h\"\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n    dlistint_t *node;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    print_dlistint(head);\n    node = get_dnodeint_at_index(head, 5);\n    printf(\"%d\\n\", node-&gt;n);\n    free_dlistint(head);\n    head = NULL;\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 5-main.c 3-add_dnodeint_end.c 0-print_dlistint.c 4-free_dlistint.c 5-get_dnodeint.c -o h\njulien@ubuntu:~/0x17. Doubly linked lists$ ./h\n0\n1\n2\n3\n4\n98\n402\n1024\n98\njulien@ubuntu:~/0x17. Doubly linked lists$ \n\nRepo:\n\n    GitHub repository: alx-low_level_programming\n    Directory: 0x17-doubly_linked_lists\n    File: 5-get_dnodeint.c\n\n6. Sum list\nmandatory\nScore: 0.00% (Checks completed: 0.00%)\n\nWrite a function that returns the sum of all the data (n) of a dlistint_t linked list.\n\n    Prototype: int sum_dlistint(dlistint_t *head);\n    if the list is empty, return 0\n\njulien@ubuntu:~/0x17. Doubly linked lists$ cat 6-main.c \n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include \"lists.h\"\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n    int sum;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    sum = sum_dlistint(head);\n    printf(\"sum = %d\\n\", sum);\n    free_dlistint(head);\n    head = NULL;\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra 6-main.c -std=gnu89 3-add_dnodeint_end.c 4-free_dlistint.c 6-sum_dlistint.c -o i\njulien@ubuntu:~/0x17. Doubly linked lists$ ./i \nsum = 1534\njulien@ubuntu:~/0x17. Doubly linked lists$ \n\nRepo:\n\n    GitHub repository: alx-low_level_programming\n    Directory: 0x17-doubly_linked_lists\n    File: 6-sum_dlistint.c\n\n7. Insert at index\nmandatory\nScore: 0.00% (Checks completed: 0.00%)\n\nWrite a function that inserts a new node at a given position.\n\n    Prototype: dlistint_t *insert_dnodeint_at_index(dlistint_t **h, unsigned int idx, int n);\n    where idx is the index of the list where the new node should be added. Index starts at 0\n    Returns: the address of the new node, or NULL if it failed\n    if it is not possible to add the new node at index idx, do not add the new node and return NULL\n\nYour files 2-add_dnodeint.c and 3-add_dnodeint_end.c will be compiled during the correction\n\njulien@ubuntu:~/0x17. Doubly linked lists$ cat 7-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include \"lists.h\"\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    print_dlistint(head);\n    printf(\"-----------------\\n\");\n    insert_dnodeint_at_index(&amp;head, 5, 4096);\n    print_dlistint(head);\n    free_dlistint(head);\n    head = NULL;\n    return (EXIT_SUCCESS);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 7-main.c 2-add_dnodeint.c 3-add_dnodeint_end.c 0-print_dlistint.c 4-free_dlistint.c 7-insert_dnodeint.c -o j\njulien@ubuntu:~/0x17. Doubly linked lists$ ./j \n0\n1\n2\n3\n4\n98\n402\n1024\n-----------------\n0\n1\n2\n3\n4\n4096\n98\n402\n1024\njulien@ubuntu:~/0x17. Doubly linked lists$\n\nRepo:\n\n    GitHub repository: alx-low_level_programming\n    Directory: 0x17-doubly_linked_lists\n    File: 7-insert_dnodeint.c, 2-add_dnodeint.c, 3-add_dnodeint_end.c\n\n8. Delete at index\nmandatory\nScore: 0.00% (Checks completed: 0.00%)\n\nWrite a function that deletes the node at index index of a dlistint_t linked list.\n\n    Prototype: int delete_dnodeint_at_index(dlistint_t **head, unsigned int index);\n    where index is the index of the node that should be deleted. Index starts at 0\n    Returns: 1 if it succeeded, -1 if it failed\n\njulien@ubuntu:~/0x17. Doubly linked lists$ cat 8-main.c\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include \"lists.h\"\n\n/**\n * main - check the code\n *\n * Return: Always EXIT_SUCCESS.\n */\nint main(void)\n{\n    dlistint_t *head;\n\n    head = NULL;\n    add_dnodeint_end(&amp;head, 0);\n    add_dnodeint_end(&amp;head, 1);\n    add_dnodeint_end(&amp;head, 2);\n    add_dnodeint_end(&amp;head, 3);\n    add_dnodeint_end(&amp;head, 4);\n    add_dnodeint_end(&amp;head, 98);\n    add_dnodeint_end(&amp;head, 402);\n    add_dnodeint_end(&amp;head, 1024);\n    print_dlistint(head);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 5);\n    print_dlistint(head);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    printf(\"-----------------\\n\");\n    delete_dnodeint_at_index(&amp;head, 0);\n    print_dlistint(head);\n    return (0);\n}\njulien@ubuntu:~/0x17. Doubly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 8-main.c 3-add_dnodeint_end.c 0-print_dlistint.c 4-free_dlistint.c 8-delete_dnodeint.c -o k\njulien@ubuntu:~/0x17. Doubly linked lists$ ./k\n0\n1\n2\n3\n4\n98\n402\n1024\n-----------------\n0\n1\n2\n3\n4\n402\n1024\n-----------------\n1\n2\n3\n4\n402\n1024\n-----------------\n2\n3\n4\n402\n1024\n-----------------\n3\n4\n402\n1024\n-----------------\n4\n402\n1024\n-----------------\n402\n1024\n-----------------\n1024\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\njulien@ubuntu:~/0x17. Doubly linked lists$ \n\nRepo:\n\n    GitHub repository: alx-low_level_programming\n    Directory: 0x17-doubly_linked_lists\n    File: 8-delete_dnodeint.c\n\n\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\n-----------------\njulien@ubuntu:~/0x17. Doubly linked lists$\n\n</code></pre></div>\n<p dir=\"auto\"><strong>Repo:</strong></p>\n<ul dir=\"auto\">\n<li>GitHub repository: <code>alx-low_level_programming</code></li>\n<li>Directory: <code>0x17-doubly_linked_lists</code></li>\n<li>File: <code>8-delete_dnodeint.c</code></li>\n</ul>\n</article>","errorMessage":null,"headerInfo":{"toc":[{"level":1,"text":"0x17. C - Doubly linked lists","anchor":"0x17-c---doubly-linked-lists","htmlText":"0x17. C - Doubly linked lists"},{"level":4,"text":"In a nutshell...","anchor":"in-a-nutshell","htmlText":"In a nutshell..."},{"level":2,"text":"Resources","anchor":"resources","htmlText":"Resources"},{"level":2,"text":"Learning Objectives","anchor":"learning-objectives","htmlText":"Learning Objectives"},{"level":3,"text":"General","anchor":"general","htmlText":"General"},{"level":2,"text":"Requirements","anchor":"requirements","htmlText":"Requirements"},{"level":3,"text":"General","anchor":"general-1","htmlText":"General"},{"level":2,"text":"More Info","anchor":"more-info","htmlText":"More Info"},{"level":2,"text":"Quiz questions","anchor":"quiz-questions","htmlText":"Quiz questions"},{"level":2,"text":"Tasks","anchor":"tasks","htmlText":"Tasks"},{"level":3,"text":"0. Print list","anchor":"0-print-list","htmlText":"0. Print list"},{"level":3,"text":"1. List length","anchor":"1-list-length","htmlText":"1. List length"},{"level":3,"text":"2. Add node","anchor":"2-add-node","htmlText":"2. Add node"},{"level":3,"text":"3. Add node at the end","anchor":"3-add-node-at-the-end","htmlText":"3. Add node at the end"},{"level":3,"text":"4. Free list","anchor":"4-free-list","htmlText":"4. Free list"},{"level":3,"text":"5. Get node at index","anchor":"5-get-node-at-index","htmlText":"5. Get node at index"},{"level":3,"text":"6. Sum list","anchor":"6-sum-list","htmlText":"6. Sum list"},{"level":3,"text":"7. Insert at index","anchor":"7-insert-at-index","htmlText":"7. Insert at index"},{"level":3,"text":"8. Delete at index","anchor":"8-delete-at-index","htmlText":"8. Delete at index"}],"siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2FPericles001%2Falx-low_level_programming%2Ftree%2Fmaster%2F0x17-doubly_linked_lists"}},"totalCount":15,"showBranchInfobar":false},"fileTree":{"":{"items":[{"name":"0x00-hello_world","path":"0x00-hello_world","contentType":"directory"},{"name":"0x01-variables_if_else_while","path":"0x01-variables_if_else_while","contentType":"directory"},{"name":"0x02-functions_nested_loops","path":"0x02-functions_nested_loops","contentType":"directory"},{"name":"0x03-debugging","path":"0x03-debugging","contentType":"directory"},{"name":"0x04-more_functions_nested_loops","path":"0x04-more_functions_nested_loops","contentType":"directory"},{"name":"0x05-pointers_arrays_strings","path":"0x05-pointers_arrays_strings","contentType":"directory"},{"name":"0x06-pointers_arrays_strings","path":"0x06-pointers_arrays_strings","contentType":"directory"},{"name":"0x07-pointers_arrays_strings","path":"0x07-pointers_arrays_strings","contentType":"directory"},{"name":"0x08-recursion","path":"0x08-recursion","contentType":"directory"},{"name":"0x09-static_libraries","path":"0x09-static_libraries","contentType":"directory"},{"name":"0x0A-argc_argv","path":"0x0A-argc_argv","contentType":"directory"},{"name":"0x0B-malloc_free","path":"0x0B-malloc_free","contentType":"directory"},{"name":"0x0C-more_malloc_free","path":"0x0C-more_malloc_free","contentType":"directory"},{"name":"0x0D-preprocessor","path":"0x0D-preprocessor","contentType":"directory"},{"name":"0x0E-structures_typedef","path":"0x0E-structures_typedef","contentType":"directory"},{"name":"0x0F-function_pointers","path":"0x0F-function_pointers","contentType":"directory"},{"name":"0x10-variadic_functions","path":"0x10-variadic_functions","contentType":"directory"},{"name":"0x11-printf","path":"0x11-printf","contentType":"submodule","submoduleUrl":"/Pericles001/printf/tree/2dc757c08b08002fb9845e7bafe6f0f8e6ca7b9c","submoduleDisplayName":"0x11-printf @ 2dc757c"},{"name":"0x12-singly_linked_lists","path":"0x12-singly_linked_lists","contentType":"directory"},{"name":"0x13-more_singly_linked_lists","path":"0x13-more_singly_linked_lists","contentType":"directory"},{"name":"0x14-bit_manipulation","path":"0x14-bit_manipulation","contentType":"directory"},{"name":"0x15-file_io","path":"0x15-file_io","contentType":"directory"},{"name":"0x16-simple_shell","path":"0x16-simple_shell","contentType":"submodule","submoduleUrl":"/Pericles001/simple_shell/tree/a702e0d883091c2eee401876f39cb91156e333c9","submoduleDisplayName":"0x16-simple_shell @ a702e0d"},{"name":"0x17-doubly_linked_lists","path":"0x17-doubly_linked_lists","contentType":"directory"},{"name":"0x18-dynamic_libraries","path":"0x18-dynamic_libraries","contentType":"directory"},{"name":"0x19-stacks_queues_lifo_fifo","path":"0x19-stacks_queues_lifo_fifo","contentType":"submodule","submoduleUrl":"/Pericles001/monty/tree/b76cd56c987331361d9ace3d0310e39cefad83b1","submoduleDisplayName":"0x19-stacks_queues_lifo_fifo @ b76cd56"},{"name":"0x1A-hash_tables","path":"0x1A-hash_tables","contentType":"directory"},{"name":"0x1B-sorting_algorithms","path":"0x1B-sorting_algorithms","contentType":"submodule","submoduleUrl":"/Pericles001/sorting_algorithms/tree/00a07fa8c8e20c686e2d664d5ac7357c2d0ce871","submoduleDisplayName":"0x1B-sorting_algorithms @ 00a07fa"},{"name":"0x1C-makefiles","path":"0x1C-makefiles","contentType":"directory"},{"name":"0x1D-binary_trees","path":"0x1D-binary_trees","contentType":"submodule","submoduleUrl":"/Pericles001/binary_trees/tree/d0e9978e1ff567f199eafcfc987451bea656fdd9","submoduleDisplayName":"0x1D-binary_trees @ d0e9978"},{"name":"0x1E-search_algorithms","path":"0x1E-search_algorithms","contentType":"directory"},{"name":".gitignore","path":".gitignore","contentType":"file"},{"name":".gitmodules","path":".gitmodules","contentType":"file"},{"name":"README.md","path":"README.md","contentType":"file"}],"totalCount":34}},"fileTreeProcessingTime":7.906376999999999,"foldersToFetch":[],"treeExpanded":true,"symbolsExpanded":false,"csrf_tokens":{"/Pericles001/alx-low_level_programming/branches":{"post":"eQYSIIyTS3NRBbe9b3k57XC8miBok5UO6hFjEx5H0fumkWjIrwWhHh8OoGyc6IEhx6MSwDLHn7yGqNRemJb2Bg"},"/Pericles001/alx-low_level_programming/branches/fetch_and_merge/master":{"post":"ad-NasADYgWDvCxwARk_qtBBinmsLst4G8gqZKOtqLgTSRRw2jO3JGRETnbHvqAuUMKyVBDYhVrZ1_xzK-aQEA"},"/Pericles001/alx-low_level_programming/branches/fetch_and_merge/master?discard_changes=true":{"post":"5CN4W_SXtH9l6F3ykxClIZXnluf2v-_KRM_A01bvjUieteFB7qdhXoIQP_RVtzqlFWSuykpJoeiG0BbE3qS14A"}}},"title":"alx-low_level_programming/0x17-doubly_linked_lists at master · Pericles001/alx-low_level_programming"}